// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SheinOrder {
  id               String   @id @default(uuid())
  url              String   @db.VarChar(2048)
  description      String   @db.VarChar(500)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  pricePaidInCents Float // Price represented as a decimal value
  shippingAddress  String // Handles delivery of physical products
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                     String   @id @default(uuid())
  name                   String
  isAvailableForPurchase Boolean  @default(true)
  priceInCents           Float // Price represented as a decimal value
  imagePath              String
  description            String
  size                   String // Specifies product size (e.g., S, M, L, etc.)
  color                  String // Specifies product color             // Specifies the fabric/material of the clothing                               // Tracks inventory for each product
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  orders                 Order[]
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  phonenNumber String
  firstName    String
  lastName     String
  hashedPassword String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  sheinOrders  SheinOrder[]
}

model Order {
  id               String   @id @default(uuid())
  pricePaidInCents Float // Price represented as a decimal value
  shippingAddress  String // Handles delivery of physical products
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  productId        String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product          Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}
